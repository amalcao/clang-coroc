***************
*** 1301,1306 ****
      return llvm::make_unique<PrecompileJobAction>(std::move(Input), OutputTy);
    }
    case phases::Compile: {
      if (Args.hasArg(options::OPT_fsyntax_only))
        return llvm::make_unique<CompileJobAction>(std::move(Input),
                                                   types::TY_Nothing);
--- 1311,1337 ----
      return llvm::make_unique<PrecompileJobAction>(std::move(Input), OutputTy);
    }
    case phases::Compile: {
+ <<<<<<< HEAD
+     if (Args.hasArg(options::OPT_fsyntax_only)) {
+       return new CompileJobAction(Input, types::TY_Nothing);
+     } else if (Args.hasArg(options::OPT_rewrite_objc)) {
+       return new CompileJobAction(Input, types::TY_RewrittenObjC);
+     } else if (Args.hasArg(options::OPT_rewrite_legacy_objc)) {
+       return new CompileJobAction(Input, types::TY_RewrittenLegacyObjC);
+     } else if (Args.hasArg(options::OPT_rewrite_coroc)) {
+       return new CompileJobAction(Input, types::TY_RewriteCoroC);
+     } else if (Args.hasArg(options::OPT__analyze, options::OPT__analyze_auto)) {
+       return new AnalyzeJobAction(Input, types::TY_Plist);
+     } else if (Args.hasArg(options::OPT__migrate)) {
+       return new MigrateJobAction(Input, types::TY_Remap);
+     } else if (Args.hasArg(options::OPT_emit_ast)) {
+       return new CompileJobAction(Input, types::TY_AST);
+     } else if (Args.hasArg(options::OPT_module_file_info)) {
+       return new CompileJobAction(Input, types::TY_ModuleFile);
+     } else if (Args.hasArg(options::OPT_verify_pch)) {
+       return new VerifyPCHJobAction(Input, types::TY_Nothing);
+     } else if (IsUsingLTO(Args)) {
+ =======
      if (Args.hasArg(options::OPT_fsyntax_only))
        return llvm::make_unique<CompileJobAction>(std::move(Input),
                                                   types::TY_Nothing);
***************
*** 1326,1331 ****
        return llvm::make_unique<VerifyPCHJobAction>(std::move(Input),
                                                     types::TY_Nothing);
      if (IsUsingLTO(Args)) {
        types::ID Output =
          Args.hasArg(options::OPT_S) ? types::TY_LTO_IR : types::TY_LTO_BC;
        return llvm::make_unique<CompileJobAction>(std::move(Input), Output);
--- 1357,1363 ----
        return llvm::make_unique<VerifyPCHJobAction>(std::move(Input),
                                                     types::TY_Nothing);
      if (IsUsingLTO(Args)) {
+ >>>>>>> official/master
        types::ID Output =
          Args.hasArg(options::OPT_S) ? types::TY_LTO_IR : types::TY_LTO_BC;
        return llvm::make_unique<CompileJobAction>(std::move(Input), Output);
